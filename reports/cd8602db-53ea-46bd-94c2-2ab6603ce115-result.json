{"name": "test_post_create_token", "status": "broken", "statusDetails": {"message": "FileNotFoundError: [Errno 2] No such file or directory: 'testdata_ddt.xlsx'", "trace": "def test_post_create_token():\n        file_path = \"testdata_ddt.xlsx\"\n>       credentials = read_credentials_from_excel(file_path)\n\ntests/datadriventesting/test_ddt.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/datadriventesting/test_ddt.py:16: in read_credentials_from_excel\n    workbook = openpyxl.load_workbook(file_path)\nvenv/lib/python3.11/site-packages/openpyxl/reader/excel.py:344: in load_workbook\n    reader = ExcelReader(filename, read_only, keep_vba,\nvenv/lib/python3.11/site-packages/openpyxl/reader/excel.py:123: in __init__\n    self.archive = _validate_archive(fn)\nvenv/lib/python3.11/site-packages/openpyxl/reader/excel.py:95: in _validate_archive\n    archive = ZipFile(filename, 'r')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <zipfile.ZipFile [closed]>, file = 'testdata_ddt.xlsx', mode = 'r', compression = 0, allowZip64 = True\ncompresslevel = None\n\n    def __init__(self, file, mode=\"r\", compression=ZIP_STORED, allowZip64=True,\n                 compresslevel=None, *, strict_timestamps=True, metadata_encoding=None):\n        \"\"\"Open the ZIP file with mode read 'r', write 'w', exclusive create 'x',\n        or append 'a'.\"\"\"\n        if mode not in ('r', 'w', 'x', 'a'):\n            raise ValueError(\"ZipFile requires mode 'r', 'w', 'x', or 'a'\")\n    \n        _check_compression(compression)\n    \n        self._allowZip64 = allowZip64\n        self._didModify = False\n        self.debug = 0  # Level of printing: 0 through 3\n        self.NameToInfo = {}    # Find file info given name\n        self.filelist = []      # List of ZipInfo instances for archive\n        self.compression = compression  # Method of compression\n        self.compresslevel = compresslevel\n        self.mode = mode\n        self.pwd = None\n        self._comment = b''\n        self._strict_timestamps = strict_timestamps\n        self.metadata_encoding = metadata_encoding\n    \n        # Check that we don't try to write with nonconforming codecs\n        if self.metadata_encoding and mode != 'r':\n            raise ValueError(\n                \"metadata_encoding is only supported for reading files\")\n    \n        # Check if we were passed a file-like object\n        if isinstance(file, os.PathLike):\n            file = os.fspath(file)\n        if isinstance(file, str):\n            # No, it's a filename\n            self._filePassed = 0\n            self.filename = file\n            modeDict = {'r' : 'rb', 'w': 'w+b', 'x': 'x+b', 'a' : 'r+b',\n                        'r+b': 'w+b', 'w+b': 'wb', 'x+b': 'xb'}\n            filemode = modeDict[mode]\n            while True:\n                try:\n>                   self.fp = io.open(file, filemode)\nE                   FileNotFoundError: [Errno 2] No such file or directory: 'testdata_ddt.xlsx'\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/zipfile.py:1283: FileNotFoundError"}, "start": 1702605994109, "stop": 1702605994110, "uuid": "6b207652-3d10-4ca3-a43d-3b613b7471fa", "historyId": "23bcf946b9e9cdea627b08cf2eff46e1", "testCaseId": "23bcf946b9e9cdea627b08cf2eff46e1", "fullName": "tests.datadriventesting.test_ddt#test_post_create_token", "labels": [{"name": "parentSuite", "value": "tests.datadriventesting"}, {"name": "suite", "value": "test_ddt"}, {"name": "host", "value": "MBP-C02DRR20MD6M"}, {"name": "thread", "value": "3015-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.datadriventesting.test_ddt"}]}